Jan 2021.  Description of functions in wsurveyUtils1 library

I. Installing
 wsurveyUtils1 uses jQuery.

 Hence, you could use the following in html files:

  <script type="text/javascript" src="/wsurvey/publicLib/jquery-1.11.3.min.js"></script>
  <script type="text/javascript" src="/wsurvey/jsLib/wsurveyUtils1.js"></script>

Hints: 
  * Some of these functions allow you to "stack trace" program flow on error. To enable this, you must also included stacktrace.js.
     For example, along with the above declarations, include:
        <script type="text/javascript" src="/wsurvey/publicLib/stacktrace.js"></script>

  * Some of these functions require styles. The required styles are in the wsurveyUtils.css. To include this you can use:
             <link rel="stylesheet" type="text/css" href="/wsurvey/cssLib/wsurveyUtils.css" >


II.  Alphabetical list of functions.

  abortJavaScript(amess,showtrace)        -- display a message and clumsily exit javascript
  addComma(nStr)                          -- add commas to a number (13612.5 becomes 13,612.5)
  addCssRule(cid,rules)                   -- add a style sheet, or add   rule to an existing style sheet
  base64 ...
    wsBase64_encode(astring)              -- general purpose base64 encoder; tries to handles both utf-8 and binary (but stupidly
    base64_encode(data)                   -- base64 encoder (not binary safe)
    Base64.encode                         -- synonym for base64_encode
    $.base64('encode',astring)            -- base64 encoder
    base64_decode(data)                   -- base64 decoder
    Base64.decode                         -- synonym for base64_decode
    $.base64('decode',astring)            -- base64 dencoder
  hh=bin2hex(s)                                   -- binary to hex
    bb=hex2bin(hh)                                 --  hex to binary
  classShow(selectorValue)               --  unhide a css rule (in the global style sheet)
  $.checkTags=function(text,ignore)       -- check a string containing html for tag errors (unclosed tags)
  crc32 (str)                             -- crc32 of a string  (almost deprecated. See ws_crc32)
  cssClassExists(aclass0)                 -- looks in all active style sheets for a .class definition
  dechex(anumber)                         -- decimal to hex converter (10 becomes a, 47 becomes 2f)
  displayStringInWindow(stuff,cvt,astext,aheader,winname,yesbars,awidth0,aheight0)   -- display string in a new HTML window
  displayElsewhere(aid,atitle,stuff3)     -- display contents of id="aid" element, or stuff3, in new window
  dump(v, howDisplay, recursionLevel)     -- display fields of an object (like php var_dump)
  dump2(v,howDisplay,recursionLevel,message) -- same as dump, but displays message at top
  dump_repeatString(str, num)             -- returns a string which has been repeated a set number of times
  echoFileBack(contents,atarget,atype,afilename)   -- echo a string back as a file, using a POST. Works with the echoFileBack.php
  get_currentTime(timeType,dateType)      -- return time and/or date
  getWord(astring,nth,adelim)             -- return array list of words, or the nth word
  html tag conversion ...
     htmlTagsConvert(str)                 -- html tags to entities (&lt;b&gt; becomes &amp;lt;b&amp;gt; )
     htmlspecialchars(str)                --  synonym for htmlTagsConvert
     htmlEntities(str)                    -- similar to htmlTagsConvert
     escapeHtml(text)                     -- similar to htmlTagsConvert
     someHTMLEncode(str)                  -- html encode a string for a limited set of characters (more powerful thatn htmlTagsConvert)
     htmlEntitiesReverse(str)             -- convert html entities (i.e. &amp;lt; becomes &lt;)
     unescapeHtml(text)                   --  similar to htmlEntitiesReverse
     someHTMLDecode(str,others,justOthers) --  decode  limited set of html enties in string: that have a syntax of &#nn;
  makeHtmlSafe(atext)                     -- remove most attributes (such as onClick, etc), and hazardous tags, from string
  missValArray(vlist,adef)                -- returns value of an index of an array (or associative array). adef if it doesn't exit
  nl2br(str, is_xhtml)                    -- convert sequences of crlfs to a &lt;br&gt;
  numberK(aval,isize)                     -- convert a number for xxK or xxM string
  parseAt(theString,achar)                --  split string into two parts, using achar
  parseUsing(thevar,d1,d2,allp )          --  split string into three parts, using d1 and  d2 characters
  removeMostAttributes(q1,whitelist,blacklist)      -- remove attributes from elements in  jquery object
  resizeHeight_noScroll(aid,type,addPx,maxMin,statusVar) -- resize container height so there are no vertical scroll bar
  rot13(astr)                             -- rot13 string converter (for weak obsfucation)
  scorePassword1(pass)                    -- score the quality of a password
  scorePassword2(strPassword, strFieldID) --   score the quality of a password, and display graphic
  Seconds_ToTime(towait,maxhrs)           -- convert a number of seconds to hh:mm:ss format
  show_dollars(avalue)                    -- convert a number to $mm.cc
  strip_active_tags(hcontent)             -- remove action tags (script, style, head) from string of html content.
  styleToJquery(astyle)                   --  convert a style="s1:value;s2:value" type of string to an object useable by $().css()
  trim(str,which)                         -- trim spaces (similar to jQuery.trim()
  updateOptionsObject(vals,newVals,checkType,okFields,synonyms)   -- update fields in an vals object, using fields in newVals object
  utf8_encode (argString)                 -- ISO-8859-1 string to utf-8

  wrapLongLines(aid)                      --  wrap wrap long lines in an element with id of aid
  ws_addEventsNew(domString,cdo,afunc,dobj,anyfunc)  -- add events to a elements ONLY If no such event exists
  ws_addEventsNew_Delay(domString,cdo,afunc,dobj,anyfunc,idelay)  -- add events to a elements ONLY If no such event exists
  ws_argJquery(ado,which)                 -- returns jquery object (of a "this" or evt argument to an event handler)
  ws_arrayToCSV(myArray,r1,r2,escQ,minL)  -- create a multi-row string, each row a CSV, from contents of array of associative arrays
  ws_arrayToHtmlTable(vv,aopts)           -- create internally scrollable html table from contents of array of associative arrays
  ws_cloneArray(aObj)                     -- clone a javascript array or object
  ws_crc32(astring,ashex)                 -- crc32 checksum
  ws_escapeHandler(evt,arg2)              -- esc (keyboard key) handler
  ws_ifParse(critList0,allowedLhs,allowedRhs)    --   process a "criteria" list that contains a list of "logical" terms
  ws_object_toArray64(aval)               -- convert open ended multi depth object (or array) to flat array
  ws_objectToFlatArray(theObj,dispType)   -- also convert open ended multi depth object (or array) to flat array
  ws_obsfucate(astring)                   -- not completely weak string obsfucation
  ws_unobsfucate(astring)                 -- unobsfucate output of ws_obsfucate
  ws_setObjectDefault(aobj,akey,adef,exact)  -- set (and return) value of aobj[akey], or adef if it does not exist
  $(someThing).wsAttr(theAttr,adef,doExact,doMultile...)
  wsRand(min,max)                           -- create replicable random number (must set global seed first)
  ws_rand_WeightedChoice(plist)        -- choose from a list, given probablitity weights
  ws_rangeToIndex(daval,rangeList,eq) --  find the "bin" daval falls in, using rangeList as bin boundaries.
  wsToggleVal(aevt,addTos)              --   create a button that can be toggled between multiple values AND change display of an associated input element
 ws_toggleElementsToView(0,inid,finds,which,daButton)    -- toggle view of elements in a parent container

III. Details on functions

::::::  abortJavaScript   :: Display an error message and then abort javascript

     abortJavaScript(amess,showTrace)

  where
       amess : optional message
       showTrace : optional. If 1, user can request that a stacktrace message (showing history of calls) be shown.
                   This can be a useful debugging trick.

  The message, if specified, will be displayed in an alert.
  Javascript will then be aborted. This is done by throwing an error, which should produce a generic message+amess
  to be written to the console.log.

  Note that showTrace only works if the stacktrace.js library is available (one that contains the printStackTrace function). If it is not available,
  showTrace is ignored.

  This is a somewhat clumsy way  of aborting (as it forces a run time error, that will be reported in the console.log).
  However, it seems that the javaScript designers expect elegant error catching everywhre.
  But sometimes  such proper coding is more trouble than it is worth (i.e.; if user input may introduce hard to plan for errors).
  Hence the existence of this abortJavaScript function!

::::::  addComma  :: return string containing commas at thousands

      astring=addComma(avalue)

  Example:
      z=1616355 ;
      ss=addComma(z);
      yields ss='1,616,355'

::::::  addCssRule(cid,rules)     ::  add a style sheet, or add rule to an existing style sheet

     addCssRule(cid,rules)

   where:

     cid: id of a stylesheet to add.
       If '', add to default style sheet.
       cid is used if you want to make multiple calls to addCssRule, and add to the same stylesheet
    rules: optional. If specified, should be an object, each field being an object.
        Each top level object's field name is used as a .class type of css rule
        The value of each top level object should be objects with fields being css attributes
        Example:   {'boldRed':{'color':'red','font-weight':600},
                    'emGreen':{'font-style':'oblique','color':'green'}
                   }
  Example:

        addCssRule('foo1',{'boldRed':{'color':'red','font-weight':600},
                           'emGreen':{'font-style':'oblique','color':'green'}
                   } ) ;

    would be the same as specifying:

      <style id="foo1" type="text/css">
        .boldRed {color:red, font-weight:600 }
         .emGreen {font-style:oblique; color:green}
      </style>



                                  ::
:::::: base64 encoders and decoders  :;
   Several are provided. In all cases, astring is a string containing content; that may contain binary, or may contain utf-8
   characters. Unfortunately, the utf-8 encoders available do not seem to handle both types cleanly. Hence the several versions.

    wsBase64_encode(astring)                -- base64 encoder. Tries utf-8 save, and decocdes result.
                                            If problem detected, uses binary safe. 

    base64_encode(astring)                   -- base64 encoder. This is NOT binary safe. It IS utf-8 safe
    Base64.encode(astring)                         -- synonym for base64_encode
    $.base64('encode',astring)            -- base64 encoder. This IS binary safe. It is NOT binary safe
    base64_decode(astring)                   -- base64 decoder.
    Base64.decode(astring)                         -- synonym for base64_decode
    $.base64('decode',astring)            -- base64 decoder


:::::: bin2Hex    :: convert a character string to hex encoding of binary character values
   hexval=bin2Hex(astring);

   examples:
       bin2hex('Kev')  returns  '4b6576'
       bin2hex(String.fromCharCode(0x00))  returns '00'

   hex2bin converts it back, so
       hex2bin ('4b6576') = 'Kev'


:::::: changeContainerHeight  ::: change the height of a container

     changeContainerHeight(containerSel,dchange,maxMin,noError,statusVar)
     
         where

  containerSel:  a string selector to the container to change.  For example: '#myMenu1'. Be exact: so include the '#'
               If more than one match, change first only
  dchange: % change. negative values means "shrink by this pct".  So
              Special case: '=nn' means "change to this size'.  'nn' can be pixels, or 'nn%' or 'nnem' or 'nnpx'. If just 'nn', 'nnpx' is assumed.
              If not specified or '', '10' (10% increase) is used
   maxmin is optional. If specified, as csv of "minpixel,maxpixel". The height will be constrained within these bounds.
             If not specified, or if one of the terms is not a number, the defaults of min=90px and max=500px are used
   statusVar : optional. If specified, a variable name. Status results will be saved to $(document).data(statusVar). So be sure it doesn't overwrite anything important!
              Otherwise,  status messages are displayed using writeStatusMessage

   Altenatives:
    * if containerSel is a event (say, due to an onclick handler, the element should contain several attributes:
         where="containerSel"
         change="npct"
         maxMin="amin,amax"
         statusVar="varname"
      only the "where" is required.
    * if an inline call, it might be easier to specify these attributes and call as changeContainerHeight(this)

   Changes the height of che containerSel container.  Either by a % (+ or -), or to a set amount.
   Can be called as is, or an assigned event.

    Notes:
       * if a  container is currently hidden, it will be made visible for a moment (jquery doesn't work well with hidden elements)
       * if a specification error, a message is written using alert (statusVar is not used)
       * A  max-height or min-height style (in an on-line or an !important style sheet entry) can prevent height changes.
         THat is: you can't make it bigger or smaller than a max-height or min-height.
         If this seems to be the case, a note is displayed (or save to the statusVar)

    Examples:
        changeContainerHeight('#myBox',10) : "expands the height of id="myBox" container  by 10%
        changeContainerHeight('.theMenus',-20,) :  shrinks the  first occurence of a containter with a .theMenus class by 20%
        changeContainerHeight('#help1','24em','Box',10) : "expands the height of id="myBox" container  by 10%



:::::: $.checkTags    :: check a string containing html for tag errors

       numErrs=$.checkTags(stringOfHtml,okayTags);

  where

      stringOfHtml: string containing html markup
      ignore : string; space delimited list of "unclosed" tags to ignore  (they do not require closure)
               By default: 'br p input option hr ' are ignored (they do NOT have to be closed)

      Returns number of errors found (0 if no errors)

    Check a string containing html for tag errors (unclosed tags)
    An "unclosed" tag is something like <b> in
         <em>Hello <b>world </em>
     (there should be a </b>)

     Note that all <x /> tags are okay  -- they are considered to be closed tags


:::::: classShow    :: unhide elements with a css rule -- check that this rule exists in the global style sheet)

     classShow(selectorText)

     where selectorText is the is the name of the rule.
     I.e.; in
       .foobar {
          color:red;
          display:none;
       }
      "foobar" would be the selector text.
      Typically one would have:

        <div class="foobar"> show me later </div>

      and than at some point call classShow('foobar')

:::::: cssClassExists    :: checks for existence, in all active style sheets, for a .class definition

        cssClassExists(aclass)

        where aclass is the name of a class.

    For example, if
      .myclass {stuff }
    is defined in a style sheet, then
       cssClassExists('myclass');
    returns true.

    Obviously, if no such class found, return false

::::::    crc32 (str)            :: crc32 of a string
       acrc=crc32(astring)

      Examples:


::::::  dechex ::  convert number to hex representation

          dechex(anumber)

   example 1: dechex(10);
     returns  'a'
   example 2: dechex(47);
     returns '2f'
  example 3: dechex(-1415723993);
    returns 'ab9dc427'

::::::  displayStringInWindow ::  display string in a new HTML window.

        displayStringInWindow(stuff,cvt,astext,aheader,winname,yesbars,awidth0,aheight0)

    where

       stuff   : a string
        cvt    : if 1, convert <, >, and & to entity codes   (default=0)
       astext  :  Optional. If 1, open as text/xml; if 2, open as text/plain. Otherwise (or if not specified), open as text/html  (default=0)
       aheader : string to put at top of text file, or to use as title of html
      winname  : name of window to create (use default if not specified --- 'sdata')
      yesbars  : default=0. If 0, don't show menubars, etc. If 1, do show
      width    : pixel width of new window  (default is to do whatever system does)
      height   : pixel height of new window (default is to do whatever system does

  Only stuff is required.

  Note: the new window will have options: toolbar=0,menubar=0,directories=0,scrollbars=1,resizable=1


::::::  displayElsewhere      -- display contents of id="aid" element, or stuff3, in new window

   displayElsewhere(aid,atitle,stuff3)
   
     alternatives:

   displayElsewhere('contentid','css1.css','cssX.css'],['pageTitle','windowName'])
   displayElsewhere('contentid','css1.css','cssX.css'],['pageTitle','windowName'],' My strin: <span class="myCssInCss1">hello</span>')

 Display contents of abox in a new window. This is a front end to displayStringInWindow

    aid: string containing id of content to  move to new window
           Or, a jquery object (.html() will be used)
           Or an array.
             First element is a pointer to the content to display (string to be used as an id, or a jquery object)
             Later ones are strings naming css files (by default, with no path). These are added to the <head> of the 'displayed elsewhere' content5

    atitle: title  of page
      Or  a 3 element array with string values:
        [titleOfPage,windowName,noButtons]
      If windowName not specified, 'Info' is used

   stuff3 : optional. If specified, use this string as tue content (ignore aid[0], but do NOT ignore aid[n>0])

   Notes
      * this is optimized to be used with output from the dump_debug php function in wsPhpLib.php.

      *  if there are any elements with a class of '.containers', then add "open" and "close" buttons are added at the top of the html output
         Similarly for  .containers_1,.containers_2
      * Buttons are NOT added if noButtons=1, or atitle='1'


  Examples:
             displayElsewhere('currentStatus');
             displayElsewhere(['myInfo','myProg1.css','Your current info']);
             displayElsewhere([0,'myStuff.css',['My page','myPopupWindow','1'],'This is the content to <span class="myClass">display</span> .....');


::::::    dump  ::  a javascript version of php's var_dump

          dump(avar,how,recursionLevel)

    dump() displays the contents of a variable like var_dump() does in PHP. dump() is
    better than typeof, because it can distinguish between array, null and object.

  Parameters:
     avar:          The variable
  howDisplay:     "none", "body", "alert" (default)
  recursionLevel: Number of times the function has recursed when entering nested
                  objects or arrays. Each level of recursion adds extra space to the
                  output to indicate level.
                  Set to 0 by default -- typically not used on original call

      *   To show the contents of the variable in an alert window: dump(variable)
      *   To show the contents of the variable in the web page: dump(variable, 'body')
      *   To just get a string of the variable: daVar=dump(variable, 'none')

  Return Value:
      A string of the variable's contents

  Limitations:
     Can't pass an undefined variable to dump().
     dump() can't distinguish between int and float.
     dump() can't tell the original variable type of a member variable of an object.
     These limitations can't be fixed because these are *features* of JS.  

     Note: uses dump_repeatString

   (lifted from  http://stackoverflow.com/questions/603987/what-is-the-javascript-equivalent-of-var-dump-or-print-r-in-php )


::::::    dump2 ::  dump, with a header

       dump2(avar,how,recursionLevel,aMessage)

  Same as dump, but aMessage (a string) is displayed at the top.


::::::    dump2String ::  dump, with a header

      astring= dump2String(avar,aMessage,ispre)

  Same as dump2, but just fewer arguments.
     aMessage  is optional: a string displayed at the top.
     ispre is optional. If '1', wrap the  return in a <div style="white-space:pre"> ... </div>
     


::::::  echoFileBack :: echo a string back as a file, using a POST.

        echoFileBack(contents,atarget,atype,afilename)

    Echo a string back as a file, using a POST. 
    o
    REQUIRES the echoFileBack.php (see  wsurvey\phpLib for a version)

    The string can be text or a a binary file (such as an image);
  arguments:
     contents : contents of the file.
       target : target of window to display response in. If not specified, _self is used (i.e.; in current window)
         type : the content type to use in the response. If not specified, application/octet-stream is used
     filename : optional. If specified, a content-disposition with this name is used (so that the browser presents a save file to
                disk option rather than displaying content in target

     Returns true


::::::  get_currentTime :: return time and/or date

       get_currentTime(timeType,dateType,myTime)

    where
        timeType:
            0 = javascript milliseconds   (and ignore dateType   argument).
            1 =  mm:hh:ss xM. This is the default (if no argument specified).
           2  = GMT offset noted
           11 or 21: same as above, but 24 hr time
           31 : hr:min as 24 hr time (no gmt)
           otherwise: same as 0

    dateType:
         1=  date Month Year
         2 = day-of-week, date Month Year 
    
    myTime : optional. If specified, a javascript style unix time stamp. It will be used instad of the
           current time


    Note: wsCurrentTime and ws_currentTime are synonyms for get_currentTime 

    If timeType and dateType ==2 : return as: xday Month date year hh:mm:ss GMT-xxxx (tz) 
    (uses javascripts .toString method)

    If both time and date specified, format is 'date-string time-string'

    Examples:
             a=get_currentTime() ==> a='1:51:22 AM'
             a=get_currentTime(0) ==> a='1588225882097'
             a=get_currentTime(1) ==> a='1:51:22 AM'
             a=get_currentTime(11) ==> a='13:24:22 '
             a=get_currentTime(2) ==> a='5:51:22 AM GMT'
             a=get_currentTime(21) ==> a='21:12:05 GMT'
             a=get_currentTime(31) ==> a='21:37'

             a=get_currentTime(1,1) ==> a= "30 Apr 2020 1:53:06 AM"
             a=get_currentTime(1,2) ==> a="Thu, 30 Apr 2020 1:53:06 AM"

             a=get_currentTime(2,1) ==> a="Apr 30 2020 5:53:06 AM GMT"
             a=get_currentTime(2,2) ==> a="Thu Apr 30 2020 01:53:06 GMT-0400 (Eastern Daylight Time)

::::::  getWord :: parse string into words

     wlist=getWord(astring,nth,adelim)

  where:
      astring : a string
      nth: if specified, retrieve just the nth word. If 0, or if not specified, return all words in an array.
           Note: to get first word, use nth=1 (not 0)
           If nth<0, get from end. So, nth=-1 means "get last word"
           If abs(nth)># words, return ''
      delim: delimiter. By default, ' ' is the delimiter.  You can specify /\s+/ (no quotes!) to signify "use any whitespace as a delimiter"
             or /[\,\s]+/ to also included commas as delimiters

       wlist: an array of words, or the nth word. Returns '' if astring is not a string, object, or if nth > # of words

    Special case:  if nth is an array, get words from nth[0] to nth[1] INCLUSIVE.

    Note: getWords is a synonym for getWord

    Examples:
     astring="this is my string of words "
     getWord(astring,1) = "this"
     getWord(astring) = ['this','is','my','string','of','words']
     getWord(astring,7)=''
     foo=getWord(astring,'',[3,4] ) = "my string"    -- note that the first word is 1, not 0.

:::::   html tag conversion functions :::

  htmlTagsConvert(str) ::convert html tags to entities
  htmlspecialchars is a synonym for htmlTagsConvert.

       string2=htmlTagsConvert(string1);

    Example:
          string2=htmlTagsConvert('this is a <b>bold</b> word');
     yields  string2='this is a &lt;b&gt;bold&lt;/b&gt; word'

  htmlEntities(astring): converts &, <, > and "
    htmlEntitiesReverse(escString) converts back to &, <, >, and "

  escapeHtml(astring): converts  &, <, >, ', and "
     unescapeHtml(escString) convert back to &,<, >,' and "

  someHTMLEncode(atring)  :: encode a string for a limited set of characters
    ascii codes <32,  ascii codes > 127, and characters:  "  &  ' ( )  ,  < >

      vv=someHTMLEncode('This is <real> and & also (fine) ');
      yields vv='&#60;real&#62; and &#38; also &#40;fine&#41;'

    Note: someHTMLencode is a synonym

    someHTMLDecode(str,others,justOthers)
       decode  limited set of html enties in string: that have a syntax of &#nn;
        &#nn; characters for the following will be decoded (converted back to the character:    "  &  ' ( )  ,  < >  %
        also, entity names (some of them non-standard) are recoqnized:  quot amp apost lparen rparen comma lt gt

          example : &#38; or &38; becomes '&',  &#41; or &rparen; become ")"

       If others is specified, other string replacements (all occurences) will happen
        Others should be an array of objects. Each object should have two fields:  toFind (the thing to find in the string), and replaceWith (the new value)
        Example: others=[]; others[0]={toFind:' this.id ',toReplace:thisElement}

        If justOthers=1, then only do the others (don't convert  back to  "  &  ' ( )  ,  < >  %)

        Example:

           others=[] ; others[0]={toFind:'fine',replaceWith:'MostExcellent'};
                  others[1]={toFind:'real',replaceWith:'NotFake'} ;

           vv=someHTMLEncode('This is <real> and & also (fine) ');
           yields vv='&#60;real&#62; and &#38; also &#40;fine&#41;'

           vv0=someHTMLDecode(vv)  ;
           yields vv0='This is <real> and & also (fine) '

           vv0=someHTMLDecode(vv,others)
           yields vv0='This is <NotFake> and & also (MostExcellent) '

           vv0=someHTMLDecode(vv,others,1)
           yields vv0='This is &#60;NotFake&#62; and &#38; also &#40;MostExcellent&#41'

    Note: someHTMLdecode is a synonym


::::::  makeHtmlSafe:: check for okay html content of 
    uses $.checkTags and strip_active_tags
    Returns [status,safe Html]
   status=0 means some kind of html problem (such as unclosed markup); 1=ok
    if 0, return "tags stripped" version of atext    (all html removed)
   if 1, return "dangerous stuff version" of atext (retains basic html)
    safe Html is the atext with most attiributes (such as onClick, etc) removed, and hazardous tags (such as <script>) removed.

function makeHtmlSafe(atext)
   where : atext is an html string{


:::::   missValArray :: return value of an array element. If undefined, return adef

   daValue= missValArray(vlist,adef )

 where

   vlist : an array specifying what element of what array to get
   adef  : default value if element is not defined.

  Details on vlist:
     vlist[0] is the   array to check.
     vlst[1].. vlist[n] are strings (or numbers), used as indices.
       vlist[1] is the first level, vlist[2] the second level, etc.

    Examples: 
      * vlist=[myarray,'person'] looks for myarray['person']
      * vlist=[hisarray,'person','cat'] looks for myarray['person']['cat']
      * vlist=[hisarray,'person','brother','age'] looks for myarray['person']['brother']['age']

  If any level is missing, return the default.

  Examples:
    If myarray['person']= 'joe';
     * missValArray([myarray,'person'],'unknown!') returns 'joe'
     * missValArray([myarray,'person','cat'],'unknown!') returns 'unknown!'


  If adef not specified, then instead of returning adef if unfound, return the the element in the list that is missing.
  Thus, missValArray([myarray,'person','cat']) returns 2 (no 'cat' index in myarray['person'])
  
  Note: ws_setObjectDefault is an alternative for finding/setting the value of an element in an associative array 


::::::  nl2br  :: convert sequences of crlfs to a <br>

     newstring= nl2br(oldstring,is_xhtml)

  where
       oldstring: string containing crlfs (\n)
       is_xhtml : if 1 (or not specified), <br /> is used as line break. Else, <br> is used

   Note:  this is from http://stackoverflow.com/questions/2919337/jquery-convert-line-breaks-to-br-nl2br-equivalent



::::::  integerK     :: convert number to a xxx or xxx.m string
    numString=integerK(aval,mLen,maxDec)

  where
      aval: number to be converted -- will always be converted into an integer
      mLen :max length (in characters) desired. Default is 4. Min value is 4 (values < 4 are converted to 4)
      maxDec: max number of places after decimal. Max is 3, min is 0

  Examples:
       integerK(502)  -- > 502
       integerK(15123)  -- >  15k
       integerK(15123,5)  -- >  15.1k
       integerK(2777888) ->= 2.78m
       integerK(2777888,4) ->= 2.8m
       integerK(30111222) ->= 30m
       integerK(30111222,5) ->= 30.1m
       integerK(30111222,6) ->= 30.11m
       integerK(30111222,6,1) ->= 30.1m
       integerK(-30111222,6,1) ->= =30.1m
       integerK(-30111222,5 ->= =-30m
       integerK(111222333444555) ->= = 111.2t

   examples/testIntegerK.html contains a demo

::::::  parseAt     ::  split string into two parts

   res=parseAt(theString,achar)

   The first part is everything before achar, the second everything after.
   If there is no achar, the first part is everything, the second is ''

   Example:
       res=parseAt('myPage.php?var1=1&var2=151','?');
   yields:
       res[0]='myPage.php'
       res[1]='var1=1&var2=151'

::::::  parseUsing  ::  pull substring from a string, using delimiters

          res=parseUsing(theString,d1,d2,allparts)

     where

       theString: a string to be parsed
       d1: character (or characters) marking beginning of substring to extracted. If not specified or '', start at string beginning
       d2: character (or characters) marking end of substring to extracted. If not specified or '', to go string end
       allparts :
              if 0 or not specified, return the "extracted" substring
              if 1, res is a 3 element array
                 res[0] : string before extracted substring
                 res[1] : the extracted substring
                 res[2] : stuff after substring
              if 2, same as 1, but res[1] = null if there is no match

               Note that the "d1" and "d2" are not in any of these res fields.

     Example:
             a="this is (my stuff) and (your stuff) too ";

             p1=parseUsing(a,'(',')');
             then p1='my stuff'

             v1=parseUsing(a,'(',')',1);
             then v1[0]='this is ';  v1[1]='my stuff' ; v1[2]=' and (your stuff) too ';

             Note that one can then extract the 'your stuff' from v1[2] using p2=parseUsing(v1[2],'(',')');

     More examples:
         vv=parseUsing['cost[3]', '[',']',1);
             vv = ['cost','3',''];

         vv=parseUsing['cost', '[',']',1);
             vv = ['cost','',''];

         vv=parseUsing['cost[]', '[',']',1);
             vv = ['cost','',''];

         vv=parseUsing['cost', '[',']',2);  // use 2 to differentiate between 'cost' and 'cost[]'
             vv = ['cost',null,''];


::::::  removeMostAttributes

   Syntax:    removeMostAttributes(q1,whitelist,blacklist)

   Remove attributes from elements in a jquery object

    q1      : a jquery object
   whitelist: array of attribute names to NOT remove (case insensitive)
   blacklist: array of arrays 2nd check: if an attribute has a value in the blacklist, remove it.

              each array should have the syntax [attributeName,val1,val2,...];
              the attributeName should be in the whitelist (since only attributes in the whitelist are subject to blacklist testing)
              attributeName and val1,.. are case insensitive comparisons

 Example -- remove "dangerous" attributes from a body of html message

     qq=$('body').find('*');
     //  note this will remove type="submit" attributes, but retains type="checkbox"
     removeMostAttributes(qq,['value','title','style','class','name','type'],[['type','submit']]);


::::::   resize_noScroll  ::  resize container so as to remove vertical scollbar

   stat1=resizeHeight_noScroll(aid,type,addPx,maxMin,statusVar)

      where

   aid: (REQUIRED). A string pointing to element. Should contain # or . or whatever.
        If > 1 match, just resize first.
        Or, can be a jQuery object (first used if it is a collection

   type (default='height') : What to set: 'height' or 'width' (case insensitive). Anything else is an error

   addPx: (default=10) size to increment by (in pixels). Should be an integer (do NOT add 'px' or 'em' at end!)
              Smaller sizes give more accurate final size, but take longer.   Default is 10

   maxMin (default='1200,25'): csv of maximum and minimum sizes.
            If not specified; '1200,25' is used.
            If just one number, it is used as the max, with min=25
            If one of the pair is missing or not a number: 1200 and 25 are used respectively
            If a number (not a string), or a string with no ',' : max=string value, min=25
            If an array (i.e.  maxMin=[1000,100] : max=maxMin[0] and min=maxMin[1]
              If a 1 element array (i.e. maxMin=[500]: max=maxMin[0] and min=25

    statusVar (default=''): name of variable to write status informaiton to (such as # of steps, and start and final size
           This information is saved in $(document).data(statusVar);
           Each message is seperated by a '\n'


 Returns [startHeignt,endHeight]. Or a string error message. Also to statusVar (if specified)

  This resizes the height of a container so that vertical, or horizontal scroll bars are not needed. 
  The maxMin controls how big or small (height or width) it can be.

  Examples
      res1=resizeHeight_noScroll('#myReport','height',10,'600,100')
          resize height of the container with id="myReport" -- but don't make > 600, or less than 100, pixels high

      res1=resizeHeight_noScroll('#myReport2','height',0,0,'say1')
         resize height of the container    with id="myReport2" -- using default maxMin and step. Save status information in  $(document).data('say1');

      res1=resizeHeight_noScroll('.notes','width')
         resize width of the  first container with a class="notes". Use defaults

      e1=$('#offer1');
      res1=resizeHeight_noScroll(e1)
         resize   height of the container that the e1 jQuery object points to (in this case, one with an id="offer1")


 Notes:
   *  This works best with elements with fixed height (and/or fixed widths) AND with overflow:auto.
   *  Repeated actions might cause odd things to happen (i.e.; setting the height, and then the width, and then the height)




::::::   rot13(astr)          ::  rot13 string converter (for weak obsfucation)

   Example: rot13('hello world') yields ''
   

::::::    scorePassword1                   : returns a "strength" score for a password (higher numbers are stronger)

      iscore=scorePassword1(strPassword)                       : returns a "strength" score for a password (higher numbers are stronger)

      where
           strPassword: a string containing a candidate password

           iscore: numeric score of the strength of the password. Larger values are more secure (hard to crack)

::::::   scorePassword2                : given a password, write's score and strength summary to containers
         scorePassword2(strPassword, strFieldID)

       where:
           strPassword: a string containing a candidate password
           strFieldID  : prefix for two element ids: strFieldID_bar and   strFieldID_txt
                          strFieldID_txt will contain a word measuring the strength of the password (from "Very Weak" to Very Secure"
                          strFieldID_bar will be shown a color bar visually representing this strength

           If either do not exist, nothing is done.


::::::  Seconds_ToTime  ::  convert a number of seconds to hh:mm:ss format   (seconds_ToTime, seconds_toTime, and secondsToTime are synonyms)

     astring=Seconds_ToTime(nseconds,dayHrs)

     where
          nseconds: number of seconds to convert to hh:mm:ss format.
          dayHrs: optional. If specified, report "days" by dividing nseconds by dayHrs hours
          astring: string containing the hh:mm:ss representation of nseconds

     If nseconds is not a number, nseconds is returned as is

     Example:
       aa=Seconds_ToTime(200) yields aa='03:20'
       aa=Seconds_ToTime(500200) yields aa='55:36:40'
       aa=Seconds_ToTime(500200,24) yields aa='2d 7:36:40'




:::::: show_dollars ::  Return  astring converting real number to $nn.mm "dollar" string
       astring=show_dollars(avalue)

   Example:
      z=166.311
      ss=show_dollars(z);
      yields ss='$166.31'

::::::  strip_active_tags     :       strip out action tags (script, style, head) from string containing html content.

          newstring=strip_active_tags(oldstring)


     This takes as input a string that contains html markup.
     It returns a string containing html markup, with "possibly dangerous" tags removed, such as  script, style, and head.
     Thus, the resulting is safer (safer?) for display -- it's formatting might not be as pretty, but it won't do anything odd.
     
     This also remove attributes that are suspisions, such as <input type="submit">
    
     This complements the strip_html_activeTags php function that removes "active" tags but leaves formatters like <b> 
     (in phpLib\wsPhpLib.php)


::::::  styleToJquery :: convert a CSS style to an object useable by .css

         aCssObject=styleToJquery(astyleString)

      where
           astyleStirng: string with CSS style elements seperated by semi colons
           aCssObject: object that can be used to set style (i.e.; in $(something).css(aCssObject) )

           Example:
                   v1=styleToJquery('background-color:red;border:1px solid blue;font-size:89%')
            would yield v1={'background-color':'red','border':'1px solid blue','font-size':'89%'}



::::::   trim      :: For most trim operations (i.e.; if the which argument is not needed) we recommend using jQuery.trim(xxx) instead
          tstr=trim(str,awhich)

       where awhich is optional:
          if 'L' : left hand side trim
             'R' : right hand side trim
             otherwise, trim from both sides 

:::::: updateOptionsObject  :: update fields in an vals object, using fields in newVals object

   update fields in an vals object, using fields in newVals object

      updateOptionsObject(vals,newVals,checkType,okFields,synonyms)

   where:
       vals : object with values.  This sets the "default values" of the updatable fields
       newVals: object with values that will be used to reset values in vals (if a match occurs
       checkType: optional. If 1, then  a match in newVals to vals only occurs if the type of the value is the same
       okFields : optional. If specified, shouuld be an array (or csv) of fieldnames in vals that can be updated.
                   Thus, if okFields is specified; if newVals has a field that matches a field in vals, it ALSO much match a field specified in okFields.
                   If it does not match a field specified in okFields, updating does not occur (the value in vals is unchanged)
      synonyms: optional.   If specified, should be an associative array.  Each field is an alternate name, whose value should be a field in vals
                Thus: if a newVals field matches a field (case insensitive), it is converted into the value of the field.
                Example synonynms='FieldA':'field1','fieldB':'field2','field':'field1'};
                   A newValues field of fieldA, field1, or field will set the value of the vals['field'] (the "field" is case insensitive)

       When examining newVals:
            Case insensitive (and space trimmed) matching is used -- so fooBar in vals matches FOOBAR in newVals
            A field name in newVals that does NOT exist (using a case insensitive match) in vals is ignored
            You can choose to ignore fields in newVals whose type does not match the type in vals
  
       Returns the updated vals object


::::::   utf8_encode (argString)         ::  ISO-8859-1 string to utf-8

           eString=utf8_encode(argString)

:::::: wrapLongLines  :: rap wrap long lines in a container

        wrapLongLines(aid)

     Aid is a string pointing to an id of a container (typically, a <div>).

     The contents of aid have <br> inserted for crlfs (\n's).
     Also, the white-space: normal style is inserted (perhaps overwriting pre-existing white-space style).

     This is meant to be used with "non-marked" up content, to slightly prettify view (at the costs of making it vertically more spread out)


::::::  ws_addEventsNew(domString,cdo,afunc,dobj,anyFunc)     ::  add events to a elements ONLY If no such event exists

          ws_addEventsNew(domString,cdo,afunc,dobj,anyFunc)

   where

     domString: string to use to find dom elements.  Example: '.addClickHere'
     cdo:   type of event (string).   Example: 'click';
     afunc : function to use as the event handler (function reference, NOT string name).  Example:  myClickHandler
     dobj: optional. If supplied, an object or scalar included in the .on event. If specified, it will be available  in evt.data of afunc. Example: {'myVal':11}
     anyFunc. optional. Default is 1. If 0, then skip only if afunc is assigned as an event handler

        Details:
             If anyFunc=1, then if a cdo event handler exist on the domString object  (i.e.; a 'click' handler if cdo='click'),
                 then do NOT assign an event handler to a dom object
             If anyFunc=0, then if a cdo event handler is assigned, AND its callback function is afunc, 
                 then do NOT "reassign" the do not assign.
                 Thus, this is used to assign several different function calls for the same event (same cdo) to domString.
                 The order these events are processed is NOT readily predictable.

          Thus: anyFunc=1 means "do NOT add if ANY cdo event handlers"
                anyFunc=0 means: "do NOT if a cdo event handler points to the afunc function"

    Returns [#added, # checked]
           #added is # of dom objects with event added,
           #checked is number examined (some of which may be skipped if there already is a cdo event on a candidate dom element)

   Special case: if only 2 arguments (no afunc) -- returns 0 or 1. 0 if a cdo event handler is NOT assigned, 1 if it is.

   Why use this?

    a) If you might be sequentially adding elements that use the same event handler (say, after adding new rows to a table), this avoids
       re-adding the event  handler to pre-existing elements.


 ws_addEventsNew_delay(domString,cdo,afunc,dobj,anyFunc,idelay)

   This variant will delay (idelay milli-seconds) before call ws_addEventsNew.
   If idelay not specified, 100 (0.1 seconds) is used.

   Why use this?
     a) If you are adding event handlers after dynamically adding content (say, after an ajax call) -- the delay allows the DOM to "settle down".
        This avoiids problems of trying to assign an event handler to something not yet in the DOM structure.



::::::  ws_escapeHandler ::  esc (keyboard key) handler

  This is used to "hide elements" by hitting the keyboard's esc key. Where this hiding can occur n a pre determined order -- with "earlier to close elements"
  being hid first.

  Initialization call:
       ws_escapeHandler('init',arg2);
  Arg2 is optional:
     * if arg2 is a string: it is the attribute to look for (to determine "hide order"). The default is 'escIndex'
     * if arg2 is an object. It can have attributes:
          'escName':  the attribute to look for. Default is 'escIndex'.
          'highlight': the class to use when highlighting a "hide this?" confirm box.
                         Default is  'ws_escHandlerHighlight' (a class is created if it does not exist)

  Otherwise, this is used as an event handler (attached to document by the 'init' call). So evt is the event  (no 2nd argument)

  How does it work?
    For all elements you wish to be "hideable" (via a click on the keyboard's escape key) you MUST specify an "escIndex" attribute.
    This attribute has the following syntax (in a csv string)
       escIndex="n,func,message"
    where:
          n: a number. This is the priority: elements with larger values of "n" are hidden first.
          func: optional. A function that is called before hiding.   Or special values: ONE or ASK
          message: optional. A message that may be displayed on function calls

          Special case: if n='TOP', and func is specified -- this func is ALWAYS run BEFORE first.
                  See below for details

   Note that multiple elements CAN have the same value of "n".
   When this occurs (and this "n" is the largest of the "visible" escIndex), this list of  elements are acted upon based 
   on the value of func.
        * func not specified, or '0', or '':   are hidden
        * 'ONE' : hidden. Other elements in the list are not hidden.
        * "ASK" : a simple confirm box is displayed, asking if you want to hide this element. The "message" (if one is specified) is dispalyed in
                 this prompt box
        * funcName : the name (as a string) of an existing function.  This function will be called -- see "custom functions" below

  Notes:
    * ws_escapeHandler only considers visible elements. If an element has the largest escIndex, but is not visible, it is ignored.
    * The order of processing of elements that have the same escIndex is indeterminate.
       For example, if there are several elements with the same escIndex value, and with a mix of ONE and ASK functions -- 
       an ASK might occur before a ONE.
    * For examples (including examples of 2 custom functions), see test_escHandler.htm.


 Custom functions
    You can specify what to do using a special function.
 The function is called as:
    myFunc(listOfElements,currentInList,escIndex);
 where
    listOfElements: list of jquery objects pointing to elements selected
    currentInList : the index (in listOfElements) to consider
    escIndex :  the "highest found" escIndex (that all elements in this list have)

 This function can consider just the currentInList element, or look at them all.
 The function should return a 3 element array
      [doHide,doReturn,doStop]
  where
   doHide: 0, 1, or 2
      If 0, the current element (listOfElements[currentInList] is left as is (though the function could close it).
      If 1, the current element is hidden.
      If 2, the current AND ALL remaining elements will be hidden. Any function call associated with remining elements is ignored --
      it is just closed!
   doReturn: 0, or 1.
      If 1, processing stops. Otherwise, the remaining elments are considered (their functions are called)
  doStop: 0 or 1
     If 0, propagation is not stopped
         Note that if one (in a series of function calls) has a doStop=1, event propagation is stopped (even if the remaining calls
         do NOT stop propagation).
       If 1, a propagation is stopped -- the event will not "bubble up" to any other event handler (such as a 2nd ws_escHandler call).

   If a non-array is returned, same as [0,0,0]


 Advanced hint:
   Multiple calls to ws_escapeHandler can be made, with different values of the 'escName'.
      In such a world, the first set of elements (with an escName attibute are considered)
      Then, the next set.

    To stop after the first set, you can use stop propogation in a custom function

  Special case: n='TOP'
  
     A (case insensitive) value of 'Top' for the escIndex has a special meaning: ALWAYS process this.
     That is, call the 'func' specified in this element BEFORE processing the "highest escIndex element(s)".
     
     This can be used to check for a condition processing (i.e.; hiding) element(s) with the currently highest
      escIndex. For example: if a dynamic variable has a large value, do NOT close the "next element to hide" -- 
      and do something else.

     The key point is that these 'TOP' functions are always called -- and then after being called the normal
     processing continues.
     Similar to above, the function is called as:
       myFunc(listOfElements,currentInList,'TOP');

     The return value should be:
        0 : process the next 'TOP' element
        1 : stop processing 'TOP' elements, and start with the escIndex elements
        2 : stop processing -- do NOT process the escIndex elements

      Thus ... unlike the returns for escIndex elements, do NOT return an array!

      Note that if there is more than one 'TOP' element, the order of processing is indeterminated.
      Though the listOfElements (and currentInList) can be used to figure out what the order is.

      Example:
         <div id="foo1" escIndex="1"> first box </div>
         <div id="foo2" escIndex="1"> 2nd box </div>
         <div id="foo3" escIndex="TOP,myCheck"> ... box </div>

       On the first ESC hit,

         a) myCheck is called (note that one need not specify a 'message' portion in escIndex)
         b) myCheck does its thing. Suppose it returns 0 or 1 (with just one TOP element, these have same effect)
         c) the "foo2" <div> is hidden

         If myCheck returned 2, foo2 would NOT be hidden


::::::  ws_argJquery ::  returns jquery object (of a "this" or evt argument to an event handler)

        eJquery=ws_argJquery(anarg,which)

 where
    anarg: the object to be examined -- usually the argument to an event handler
    which: optional. If specified, can be 'target', 'currentTarget', or 'delegateTarget'. If not specified, or anything else, 'target' is used

  Returns a jquery object pointing to this anarg argument... such as what element was clicked (or what parent element was clicked)

  which is optional.  It selects which element to use. Possible values are (the default is 'target'):
          target: use the element that triggered the event (e.g., the user clicked on)
          delegateTarget: use the element the event listener was  attached to
          currentTarget: usually the same as delegateTarget. It can differ if .on was used, and  "selector" was specified
                   If a selector was specified, currentTarget returns the element matching this selector (a child of delegateTarget, possibly parent of target)
                   If no selector field, currentTarget and delegateTarget are the same.
Why use this?
   An event handler could of been assigned using:
     i) jquery.     Example:   $('#myButton').on('click',myFunction)
    ii) javascript. Example:   document.getElementById('myButton').addEventListenter('click',myFunction);
   iii) inline.     Example:   <input type="button" value="info!" onClick="myFunction(this)"  what="mainInfo">
    iv) String.     Example:   <input type="checkbox" id="whatBox" value="Guess1" onClick="myFunction('#whatbox')"  what="Correct!">

 This detects the method of assignation, and returns the appropriate jquery object.

 Note:  If a "inLine" call, or a 'string' call:  which is not used (the actual element clicked is assumed).

 Example:
   function myFunction(thisEvt)  {
      var eJquery=ws_argJquery(thisEvt);
      var awhat=eJquery.attr('what');



::::::  ws_arrayToCSV :: convert an array of associative arrays to a CSV -- one row per row of array

      csvString=ws_arrayToCSV(myArray,row1,row2,escapedQuote,minLength)

 where
     myArray : array, each row is an associative array
     row1 : optional (default is 0). Where to start in array
     row2 : optional (default is  vv.length-1). Where to end
     escapedQuote: optional (default is '`'). What to replace " with. Hint: To replace with \", use '\\"'
     minLength : minimum length of each substring (default is any length). If not this long, pad (at end) with spaces
     maxSizeCheck  : if specified and 1 -- just return maximum size of a substring.

  Display an array of associative arrays as a CSV -- one row per row of array.
  ALL indices have spot in each CSV row (the header and data rows).
  That means that different indices can appear in different rows of myArray.
     If an array row does NOT contain an index (in its associative array), its position is left blank in the corresponding row of the CSV.

 Output:
    The first row is a CSV of associative array indices;
    The next nrows (# of rows in myArray) are  CSVs of the values (in this row) --
          with ",," used for indices that do NOT exist in this row (of myArray)
    Each substring (between ,,) will be quoted if non-numeric.
    If a " appears, a ` is used (or you can set the escapedQuote character)

 Example:
    myArray[0]={'dogs':1,'cats':2,'gerbils':6};
    myArray[1]={'cats':0,'comment':'cat ate a gerbil'};
    myArray[2]={'dogs':2};
    myArray[3]={'dogs':0,'cats':0,'comment':' parakeets, and canaries'};
    myArray[4]={'dogs':3,'puppies':2}

    csvString=ws_arrayToCSV(myArray) ;

 csvString will be (note that order of indices is based on order of appearance in myArray):
      "dogs","cats","gerbils","comment","puppies"
      1,2,6,,
      ,0,,"cat ate a gerbil",
      2,,,,
      0,0,," parakeets, and canaries",
      3,,,,2


    mx1=ws_arrayToCSV(myArray,2,10000,1,1) ;
    mcsvString2x1=ws_arrayToCSV(myArray,2,10000,mx1) ;

 csvString2 will be (note that "gerbils" does not appear, since it only is in row 1 of myArray)
     "dogs"                    ,"cats"                    ,"comment"                 ,"puppies"
     2                         ,                          ,                          ,
     0                         ,0                         ," parakeets, and canaries",
     3                         ,                          ,                          ,2


:::::     wsAttrib     ::  read atribute
    aval=wsAttrib(e1,theAttre,adef,doExact,doMultiple)
 Same as wsAttr, but as a function call
 e1 should be a jquery object (pointing to a dom object that might contain attributes)
 15 aug 2020: not implemented

:::::     wsAttr     ::  extended attribute reader extension to jQuery
     This is called as
           $(someThing).wsAttr(theAttr,adef,doExact,doMultile...)
           
      where all arguments are optional. If no arguments, return an associative array containing all attributes (as indices) 
      and their values

         theAttr: look for this attribute. If its a regex expression, search for attribute(s) with names that match 
                 this regular expression.
         adef:  the default, if no match is found. If not specified, false is used
      doExact:    0 (or not specified): use theAttr as is in a regular expression match
     `           1:  exact (case insensitive) match only. Do NOT attempt a regular expression match
                 2:  trailing substring match. Basically, convert 'theAttr' into '.*theAttr$'. 
                    Be careful using this if theAttr is a regular expression
                 3:  leading substring match.  Basically, convert 'astring' into '^astring.*'.
                     Be careful using this  if theAttr is a regular expression
       doMultiple:   0 (or not specified): return the first match. Or an exact match, if one occcurs
                    1: return an associative array of all attributes that match (including an exact match, if it occurs)
                Note: if doExact=1, doMultiple is ignored (it is set to 0)

   Returns the value of an attribute, or a default value if the attribute can not be found.  
   Or a list of matching attributes (and their values).

   "Found" means "if an exact match does not exist, then do a case insensitive regular expression match".
   You can select how the attribute (theAttr) argument is interpreted in the regular expresssion match: 
   as a trailing match, a leading match, or as is.
   The "trailing" and "leading" match options are just shortcuts -- they can be used if you don't want to recollect
   how specify regEx expression syntax for   trailing and leading matches.
   
   Example:
     <span id="findMe"  title="my main title" harpoon="pointed!" ws_title1="sub title ">
     ...
     eTest=$('#findMe');
     eTest.wsAttr('titl')  --   probably returns "my main title" (depends on how jQuery reads attributes from the <span> element)
     eTest.wsAttr('Title','nada',1)  --    returns "my main title" (exact -- though case insenitive -- match)
     eTest.wsAttr('cards')  --  returns false
     eTest.wsAttr('_title')  -- returns "sub title"
     eTest.wsAttr('_title','emtpy',1)  --     returns "empty"
     eTest.wsAttr('_title','emtpy',2)  --     returns "sub title"  (ends with _title)
     eTest.wsAttr('_title','emtpy',3)  --     returns "empty"      (does not start with _title)
     eTest.wsAttr('title','emtpy',0,4)  --     returns {'title':'my main title','_ws_title1':'sub title'}


::::::    ws_arrayToHtmlTable   ::  display an array as an internally scrollable html table. Or change already displayed scrollable html table. Or add a click handler

       res=ws_arrayToHtmlTable(vv,aopts)
  where
       both the use of these arguments depends on the mode.

  What's the point of ws_arrayToHtmlTable?

    The main advantage of this is the abilty to "internally scroll" rows.
    That means the header (and perhaps a few "non-scrolled rows" do not move, but you can scroll through  many lines below the header.
    Thus, the header row (with column specific names) is always visible. AND : when you scroll to the right, the header ALSO scrolls.
    IOW: The column headers are always above the correct columns, even when you scroll down or right.

  For example:
          stuff= ws_arrayToHtmlTable(vv,aopts) ;
          tableString=stuff[0];
          tableId=stuff[1];
          $('#myTable').html(tableString);
    The tableID can be used to assign a click handlers for cells . For example:
         ws_arrayToHtmlTable(sayCellInfoFunction,tableid)    -- where sayCellInfoFunction is a custom function

  For a detailed description, see ws_arrayToHtmlTable.txt


:::::: ws_closeParent(athis) ::  close parent (or other element)


  This is called either via a
       onClick="ws_closeParent(this)"
    or a
      .on('click',ws_closeParent);

 In either case, if the element has a "closeParent" attribute -- the matching dom element IF IT IS A PARENT  will be hidden.
 This attribute MUST be CSS style: so to close id="myTop", use closeParent="#myTop"
 If no closeParent, "hide" the immediate parent (if one exists)

 Example:
   <input type="button" onClick="ws_closeParent(this)" value="x" title="close this box" >

 Example 2:
    <input type="button" id="closeButton1" value="x" title="close this box" >
      ...
    $('#closeButton1').on('click',ws_closeParent);   // will close immediate parent

 Example 3:
    <input type="button" id="closeButton1" value="x" closeParent="#myGrandparent" title="close this box" >
      ...
    $('#closeButton1').on('click',ws_closeParent) ;    // will close an element with id="myGrandparent" (if it is a parent)


 Note:
    * For some examples, see test_escHandler.htm.


::::::   ws_crc32(astring,ashex)     ::  crc32 checksum.  Newer version of crc32

     acrcHash=ws_crc32(astring,ashex)
  where
     astring: string to create crc32 of
     ashex: optional. If 1, return as hex (otherwise as decimal)

  Examples:
      ws_crc32('abc')    ==>  891568578
      ws_crc32('abc',1)  ==>   352441c2

      ws_crc32('hello world')    ==>  22957957
      ws_crc32('hello world',1) ==>   0d4a1185


:::::      ws_cloneArray(aobj)                ::: clone an array or object

   newArray=ws_cloneArray(oldArray);
   
   You can then change newArray without changing the values in oldArray -- at any depth within the object.
   This uses json stringify.
  
  Note: ws_cloneObject and ws_cloneObj are synonyms for ws_cloneArray


:::::   ws_ifParse(critlist,allowedLhs,allowedRhs,morConds)    ::::     process a "criteria" list that contains a list of logical terms

  resMatrix=ws_ifParse(critlist,allowedLhs,allowedRhs,moreConds);

where

  critList: a string containing one or more logical terms.    For example: 'a < b & d eq 10 '
  allowedLhs : optional. If specified, an array of   values allowed on the LHS. For example, a list of known variables
  allowedRhs :  optional. If specified, an array of   values allowed on the RHS. For example, a list of known variables
  moreConds: optional. An array with additional "conditions". These are added to the list of permissible conditions

 Each "term" in critList MUST have 3 components:
   LHS  cond RHS
 The conds are the following logical operators (case insensitive)
     EQ  NE GE LE GT LT == !=  >= , <=  >  <
  The LHS and RHS can be numbers or strings. They must NOT contain spaces.
  
  The  moreConds are added to ths list. 
  For example:  moreConds=['IN') could be used to specify "  v1 in array1 " -- is the value of match ANY of the values in the array1 array.


 Special case:
    if a term starts with a ! or a NOT , it is a "not" term.
 Example:
         b ge 100  & ! z == 1
         not z[5] lt count(zz)

 For allowedLhs and allowedRhs
    If not specified (or specified as []) no checking is done.
    If specified, there are several things that can be checked. Checking does not effect procssing OTHER than in the generation
    of error messages and error flags
    
    a) A variable name.  If a variable is specified in a term (such as 'a2' in 'a2 > 6') and does NOT appear in the list,
      and error is generated
    b) Array declrations. This uses a format of 'arrName[]' -- follow the name with a [].
       If a variable appears using array notation (such as 'store[5]' in ' store[5] > 1000'),
       and  it is no specified as an array, an error occurs
    c) Function declarations. This uses a format of 'funcName[]' -- follow the name with a ().
       If a variable appears using fuction notation (such as 'max(sizes)' in ' max(sizes) < 5000'),
       and  it is no specified as an function, an error occurs

    Special cases:
      * '*n' is special -- if included it means "all numbers are permissible"
      * [] is a special case: when used with NO other array notations, it means "any array notation will cause an error".
         Note that if there is NO array specified, array variables are processed without any error notation.
         Thus: error notation ONLY happens if at least 1 array is specified OR if you specify []
      * () is a special case: when used with NO other function  notations, it means "any function  notation will cause an error".
         Note that if there is NO functions specified in a term , functions are processed without any error notation.
         Thus: error notation ONLY happens if at least 1 function  is specified OR if you specify ()

 Esamples:
     allowedLhs=['myArray[]','mtx3'];
     Then, ' myArray[3] < 5 '
     will not cause an error.

     allowedRhs=['myArray[]','mtx3',max()];
     Then, ' 103 < max(mtx3) '
     will not cause an error.


 Return a matrix with parsing results.
   [0] an object with 3 keys:
       'errors': '' if no error. Otherwise, an error message string
       'nAnds': # of and terms
       'nOrs' : # of or terms
   [1] .. [nterms] are objects describing each term.

   Each  of these object has these keys:

    'LHS': an object with several keys, that depend on the entry. These are:
           'original','error','val','function','var','listIndex', and 'index'. See below for a description.
    'cond' : a condition. Can be:  EQ NE LE LT GE GT
    'RHS': same syntax as LHS, for the RHS
    'and':  a 1 if  and condition, a 0 if an OR condition
    'not' :  a 1 if a NOT, 0 otherwise
    'term' : a string containing the term (after some processing)
    'nerrs': count of errors for this term. Error messaages are stored in [0]['errors']

More on 'LHS' and 'RHS'

  The 'LHS' (and 'RHS') components of each term are also objects, which can contain several keys.
  The possible keys are:

   'original' : the value of the LHS (or RHS), as supplied in critList. Always supplied
   'error': 1 if an error occurred. Otherwise, 0. The only time error=1 is if a allowedLhs (or allowedRhs)
            is not empty, AND there is no match.
   'val' : the value of the LHS (or RHS) --if  allowedLhs (or allowedRhs) is empty:
           Or, a numeric value if *n is an element in allowedLhs (or allowedRhs), and the LHS (or RHS) is numeric

           Or, if '*n' is specified and the LHS (or RHS) is numeric

  The following are only supplied if an allowedLhs (or allowedRhs) is specified.

  'function' : if  a ' xxx(yy)' is specified. The name of the 'function'.
              For example:  in 'count(orders)',   function = 'count'
               If allowedLhs (or allowedRhs) is NOT specified, or if it is but the function does NOT appear in this list,
               listIndex will not be created. Note in the latter case (not appearing in an non-empty list), an
               error would be generated (though all other keys remain the same)

  'var':   the name component. If  myVar[33], 'name' would be myVar
  'listIndex': the index of name into the list (allowedLhs or alloweRhs).
               For example< if allowedLhs=['x1','y1','z2','z3'), then  ' z2 < 4 ', the listIndex for z2 would be '2'
               If allowedLhs (or allowedRhs) is NOT specified, or if it is but the array name does NOT appear in this list,
               listIndex will not be created. Note in the latter case (not appearing in an non-empty list), an
               error would be generated (though all other keys remain the same)
  'index'  : the index IF a [xx] is used. Example:  in 'y1[25] > 2000', the index is '25'



  Notes:
    * If something isn't relevant, the field is not created. Thus, the 'function' key is ONLY created if a 'xx(y)' kind of
    entry is being examined.

  * Errors are not fatal. They just are noted in the returned values -- in the 'errors' key in [0], and in
    individual LHS or RHS terms.

  * If an unknown condition is used, the 'cond' will have an undefined value

  * However if anything other than a  | or & (or a ,) is used, no terms are processed ( [0]['errors'] will contain an error string)

  * You do NOT have to have spaces around the ==, etc terms. Everything else (including & and  !) must have spaces on both sides
 
  * Parenthesis are NOT supported. The assumption is that any of the OR conditions, and all of the AND conditions, are to be
    satisified.

   * If using  array notation or function notation, the stuff inside of  the [] (or ()) NOT contain spaces or [ and ] characters.
         All other characters are allowed.

  * empty terms are dropped, and not included in the returned matrix.
     Thus:  ' x < 3 | x > 5 |  |  y == 100 ' returns 3 terms (the 2nd | in '|  |' is dropped)

  * You can include "comments" by starting a term with a  ;. They are dropped
       Example: ' a1 ge 100 , ; this next  term may be dropped ,| a1 < 1 '
                is the same as '' a1 ge 100 | a1 < 1 '

 * ws_test_IfParse.html (in /www/jsLib/examples) contains a demo


  Examples: assume that LHSindex=['b','c','f']

          c == 10   ::
                  [0]:  object(3): {
                     errors:  string(0): ""
                     nAnds:  number: 0
                     nOrs:  number: 1
                  }
                  [1]:  object(8): {
                     LHS:  object(4): {
                        error:  number: 0
                        original:  string(1): "c"
                        var:  string(1): "c"
                        listIndex:  number: 1
                     }
                     cond:  string(2): "EQ"
                     RHS:  object(3): {
                        error:  number: 0
                        original:  string(2): "10"
                        val:  string(2): "10"
                     }
                     and:  number: 0
                     not:  number: 0
                     term:  string(9): "c  EQ  10"
                     nerrs:  number: 0
                  }

          b[3] < 6  ::

                  [0]:  object(3): {
                     errors:  string(0): ""
                     nAnds:  number: 0
                     nOrs:  number: 1
                  }
                  [1]:  object(8): {
                     LHS:  object(5): {
                        error:  number: 0
                        original:  string(4): "b[3]"
                        var:  string(1): "b"
                        listIndex:  number: 0
                        index:  string(1): "3"
                     }
                     cond:  string(2): "LT"
                     RHS:  object(3): {
                        error:  number: 0
                        original:  string(1): "6"
                        val:  string(1): "6"
                     }
                     and:  number: 0
                     not:  number: 0
                     term:  string(11): "b[3]  LT  6"
                     nerrs:  number: 0
                  }


          ff(dog[4]) > 10  ::

                 [0]:  object(3): {
                     errors:  string(54): "LHS (dog) variable not allowed  in: ff(dog[4])  GT  10"
                     nAnds:  number: 0
                     nOrs:  number: 1
                  }
                  [1]:  object(8): {
                     LHS:  object(5): {
                        error:  number: 1
                        original:  string(10): "ff(dog[4])"
                        function:  string(2): "ff"
                        var:  string(3): "dog"
                        index:  string(1): "4"
                     }
                     cond:  string(2): "GT"
                     RHS:  object(3): {
                        error:  number: 0
                        original:  string(2): "10"
                        val:  string(2): "10"
                     }
                     and:  number: 0
                     not:  number: 0
                     term:  string(18): "ff(dog[4])  GT  10"
                     nerrs:  number: 0
                  }


  Notes:
     * You do NOT have to have spaces around the ==, etc terms. Everything else (including & and  !) must have spaces on both sides
     * Parenthesis are NOT supported. The assumption is that any of the OR conditions, and all of the AND conditions, are to be
       satisified.
     * If using  array notation, the stuff inside of  the [] can NOT contain spaces or [ and ] characters.
         All other characters are allowed.
     * empty terms are dropped, and not included in the returned matrix.
       Thus:  ' x < 3 | x > 5 |  |  y == 100 ' returns 3 terms (the 2nd | in '|  |' is dropped)
    * You can include "comments" by starting a term with a  ;. They are dropped
       Example: ' a1 ge 100 , ; this next  term may be dropped ,| a1 < 1 '
                is the same as '' a1 ge 100 | a1 < 1 '
    * ws_test_IfParse.html (in /www/jsLib/examples) contains a demo

Another example:
      lhsInd=['a','b','zcount', '*n','*()' ];
      myStuff='zCount[65] > 23100 & F(zB[61]) < 30 | &!33 < aa3[3]';
       dd=ws_ifParse(myterms,lhsInd);

  dd will be:
                  [0]:  object(3): {
                     errors:  string(105): "LHS (F)  function not allowed in: F(zB[61])  LT  30; LHS (zB) variable not allowed  in: F(zB[61])  LT  30"
                     nAnds:  number: 2
                     nOrs:  number: 1
                  }
                  [1]:  object(8): {
                     LHS:  object(5): {
                        error:  number: 0
                        original:  string(10): "zCount[65]"
                        var:  string(6): "zcount"
                        listIndex:  number: 2
                        index:  string(2): "65"
                     }
                     cond:  string(2): "GT"
                     RHS:  object(3): {
                        error:  number: 0
                        original:  string(5): "23100"
                        val:  string(5): "23100"
                     }
                     and:  number: 0
                     not:  number: 0
                     term:  string(21): "zCount[65]  GT  23100"
                     nerrs:  number: 0
                  }
                  [2]:  object(8): {
                     LHS:  object(5): {
                        error:  number: 2
                        original:  string(9): "F(zB[61])"
                        function:  string(1): "F"
                        var:  string(2): "zB"
                        index:  string(2): "61"
                     }
                     cond:  string(2): "LT"
                     RHS:  object(3): {
                        error:  number: 0
                        original:  string(2): "30"
                        val:  string(2): "30"
                     }
                     and:  number: 1
                     not:  number: 0
                     term:  string(17): "F(zB[61])  LT  30"
                     nerrs:  number: 0
                  }
                  [3]:  object(8): {
                     LHS:  object(3): {
                        error:  number: 0
                        original:  string(2): "33"
                        val:  string(2): "33"
                     }
                     cond:  string(2): "LT"
                     RHS:  object(3): {
                        error:  number: 0
                        original:  string(6): "aa3[3]"
                        val:  string(6): "aa3[3]"
                     }
                     and:  number: 1
                     not:  number: 1
                     term:  string(14): "33  LT  aa3[3]"
                     nerrs:  number: 0
                  }

 To get rid of the errors ,change allowedLhs to ['a','b','zcount','*n','f()','zb']

                  [0]:  object(3): {
                     errors:  string(0): ""
                     nAnds:  number: 2
                     nOrs:  number: 1
                  }
                  [1]:  object(8): {
                     LHS:  object(5): {
                        error:  number: 0
                        original:  string(10): "zCount[65]"
                        var:  string(6): "zcount"
                        listIndex:  number: 2
                        index:  string(2): "65"
                     }
                     cond:  string(2): "GT"
                     RHS:  object(3): {
                        error:  number: 0
                        original:  string(5): "23100"
                        val:  string(5): "23100"
                     }
                     and:  number: 0
                     not:  number: 0
                     term:  string(21): "zCount[65]  GT  23100"
                     nerrs:  number: 0
                  }
                  [2]:  object(8): {
                     LHS:  object(6): {
                        error:  number: 0
                        original:  string(9): "F(zB[61])"
                        function:  string(1): "F"
                        var:  string(2): "zb"
                        listIndex:  number: 5
                        index:  string(2): "61"
                     }
                     cond:  string(2): "LT"
                     RHS:  object(3): {
                        error:  number: 0
                        original:  string(2): "30"
                        val:  string(2): "30"
                     }
                     and:  number: 1
                     not:  number: 0
                     term:  string(17): "F(zB[61])  LT  30"
                     nerrs:  number: 0
                  }
                  [3]:  object(8): {
                     LHS:  object(3): {
                        error:  number: 0
                        original:  string(2): "33"
                        val:  string(2): "33"
                     }
                     cond:  string(2): "LT"
                     RHS:  object(3): {
                        error:  number: 0
                        original:  string(6): "aa3[3]"
                        val:  string(6): "aa3[3]"
                     }
                     and:  number: 1
                     not:  number: 1
                     term:  string(14): "33  LT  aa3[3]"
                     nerrs:  number: 0
                  }

::::::  ws_object_toArray64   ::  convert open ended multi depth object (or array) to flat array

        flatArray=ws_object_toArray64(aval)

 where:

     aval: the array or object to convert
     fieldlist and buildon : not used in origian call -- used internally!

    Open ended multi depth object (or array) to flat array.
    Recurses through array or object, converting each element in an array

     Each row of the output array consists of a two element array   -- with each element in base64
        [0] csv list of element names
        [1] the value (either a string or a number)

  For example a[0]['help']['size']='515'; would return an element in the array of: ['0,help,size','515']

  Note: see below for an exception (the array may only be one element)

  Actually: the '0,help,size' string would be in base64, as would the '515'

  The resulting array can be .join(seperator) for safe transmission (say, via ajax) and later reconstruction


 Notes:
 *   if this is called with a number or string (not an array or object), ['',aval] (both in base64) is returned
     (the '' signals not an array or object, hence no field name)
 *  If aval is an empty object, ['ind1,inde'] is returned (that is, a 1 element array signifies an empty object)

This is very similar to ws_objectToFlatArray!

::::: ws_objectToFlatArray(theObj,dispType) ::: also convert open ended multi depth object (or array) to flat array

        flatArray=ws_object_toArray64(aval)

   where:

     theObj: the object to "flatten"
     dispType: how to display the "name"
            'array': return as an array.
           'arrayString': use a [] syntax. Such as 'name1[subNameA][endit]'
            Otherwise: a string delimited with lowerCase dispType

 Each row in the returned array is a [names,value];
   where value is the final value (string or number)
   and name is a "name" that captures all of the "nodes" of the object.

 Example: for theObj['topName1]['subName1']['endLeaf']=1
    Then names will be:
          'array': ['topname1','subname1','endleaf'];
    'arrayString':  'topName1[subname1[endleaf]'
      ', '      : 'topName1,subname1,endleaf'

   Example: for theObj['dog']='fido'
             'array': ['dog'];
       'arrayString':  'dog'
         ', '      : 'dog'

This is very similar to ws_object_toArray64!

::::::  ws_obsfucate                 ::  somewhat strong string obsfucation
       obsfString= ws_obsfucate(astring)

       This meant for use with ws_unobsfucate function in wsPhpLib.php

::::::  ws_unobsfucate(astring)                 ::  unobsfucate output of ws_obsfucate
      astring=ws_unobsfucate(obsfString)

      This meant for use with ws_obsfucate function in wsPhpLib.php

::::::  ws_selectText( containerid,awhat)                 :: mark, or copy, contents of a container


     ares=ws_selectText( containerid,awhat)

  where
  containerid: id of a container to mark, copy, or copy to clipboard.  A string, without leading #
   awhat: optional. 'MARK' (the default), 'COPY',   'CLIP' ,or UNNMARK:
         MARK text in container.  returns true or false
        COPY marked contents.  returns contents, retaining HTML
        CLIP: copy to clipboard (case insensitive).  returns 1 on success, 0 on faiure, -1 if unsupported browser
        UNMARK if any text is selected. returns true

  NOTE: CLIP does NOT seeem to work under firefox (april 2020)



 :::::: ws_setObjectDefault         :: Return value from an associative array, or return default

    ws_setObjectDefault(aobj,akey,adef,exact)

 where

    aobj: the object to be examined -- an associative array
    akey: key to look for. By default: case insensitive, trimmed.
    adef : value to use if no matching key exists
    exact:  Optional. Default is 0
            0: case insensitive match
            1: case sensitive match
            2: case insenstive abbreviation match
            3: case insensitiev substring match

  This will do two things:
    If aobj[akey] exists -- returns its current value

    If aobj[akey] (using match method determined by exact) does not exist, two things happen:
      i)     aobj[akey]=adef;  -- and since aobj is called by reference, this is a permanent change
     ii)     return adef  ;

  Notes:
    *  If multiple keys are matches (say, a substring match) the value returned is indeterminate
    *  missValArray is an alternative (for finding values in a multi dimensional object)

  Examples:
       assume  myObj={'dan':1,'samurai':100,'assam':231,'Dan':11,'dog':'fido'}
   then
      ws_setObjectDefault(myObj,'Samurai','nope')    : returns '100'
      ws_setObjectDefault(myObj,'cat','felix')       : returns 'felix'
      ws_setObjectDefault(myObj,'DAN','wow')         : returns either '1' ,or '11'  -- probably '1' (since 'dan' is defined before 'Dan')
      ws_setObjectDefault(myObj,'dan','wow')         : returns  '1'  -- case sensitive exact match is always done first.
      ws_setObjectDefault(myObj,'sam','arf,')        : returns  'arf'
      ws_setObjectDefault(myObj,'Sam','arf,',2)      : returns  '100'
      ws_setObjectDefault(myObj,'SAM','arf,',3)      : returns  '100' or '231'

  For a demo, see jslib/examples/test_setObjectDefault.htm


 ::::::  wsRand(min,max)        ::   create replicable random number (must set global seed first)
    
      arand=wsRand(min,max) 
    
    min and max optional -- they are the minimum and maximum of the range. If not specifie, 0 and 1 are used
    
    This uses the Math.wsSeed global variable (created by this library).
    Once it is set, to any number, the random numbers subsequenty generated are replicable.
    That is, if you run a program at a later date, the same sequence of random number will be generated.
    
    It is recommended that this seed by between 1 and 100.
    
    Example:
    mySeed=Math.random()*100;
    Math.wsSeed=mySeed 
       ... do  a bunch of stuff using a slew of random numbers, such as
           myRand=wsRand();
    
    Save mySeed, and come back later to generate the same value


 ::::::  ws_rand_WeightedChoice(weights)  ::  given a list of weights, chose a random index
 
       jj=ws_randWeightedChoice(weights)
       
   where
     weights: an array of numeric weights.
     jj= index into weights: 0 to weights.length-1
     
   
   Each value in weights is treated as "relative probablity".
   The probablity is relative to the sum of all weights.
   Value <=0 are treated as 0, and are never chosen.
   
   Example:  weights=[3,6,1,3,10,7]
      Sum is 30, thus the probabilities are:
       Index       with
       returned    probablity
         0:         10%
         1:         20%
         2:         3.3%
         3:         10%
         4:         33%
         5:         23.3%


 ::::::   ws_rangeToIndex(daval,rangeList,eq)  :: find the "bin" daval falls in
 
      indUse= ws_rangeToIndex(daval,rangeList,eq,retVals)
     
         daval : number to find what bin it is in
         rangeList: list of numeric boundaries. If not sorted in ascending order, undependable results will be returned 
                    (lesser values later in last are basically skippped)
         eq: optional. If 1 (the default) use a <= for boundaries. 0: use <
         retVals: optional. If specified, return this value INSTEAD of bin number. Length of this be should one more than rangeList.
                             If not, undefined may be returned

     Returns:
        index into rangelist of the value that is greater than (or equal) to daval. This is 'bin' daval falls into
        if daval > rlist[rlist.length-1], return rlist.length

     Examples:
             rlist=[2,5,10,20,100];
          rlistUse=[2,5,10,20,222,10000];
          ws_rangeToIndex(1,rlist) --> 0
          ws_rangeToIndex(2,rlist) --> 0
          ws_rangeToIndex(2,rlist,0) --> 1     (using < , so in 2nd bin
          ws_rangeToIndex(6,rlist) --> 2
          ws_rangeToIndex(512,rlist) --> 5   (greater than max value in rlist)

          ws_rangeToIndex(1,rlist,0,rlistUse) --> 2
          ws_rangeToIndex(3,rlist,0,rlistUse) --> 5
          ws_rangeToIndex(26,rlist,0,rlistUse) --> 222
          ws_rangeToIndex(512,rlist,0,rlistUse) --> 10000   (greater than max value in rlist)




   Note: if daval and ranglist are converted to floats. So if they aren't numbers, they become 0.0


 ::::::  ws_toggleElementsToView              :: toggle view of elements in container -- step through several leves
 
        ws_toggleElementsToView(athis)    -- for use in a onclick, or .on('click',.)
    or
       ws_toggleElementsToView(0,inid,finds,which,daButton)    -- explicit function call

  For the "onclick" version,  reads uses attributes of the "button" that invokes this
     inid: dom string  of container to toggle elements within. If not specified, use immediate parent of athis
     finds: class of elements to toggle. If not specified, use 'toggleVarsToView'
     maxWhich : max "which'. Optional. If not specified, max value of 'which' (in elements with toggleVarsToView class) is used
     which : counter for "which" elements to view. Increment on each call, up to maxWhich.
             all ws_toggleElementsToView elements with a 'which' attribute <= which (after increment) will be viewed. Others will not be
             If not set, which=1 is used (2nd most restrictive view).

  Each of the "finds" elements (within inid) SHOULD have a which attribute --
  If one does not, which=1 is used

  As you "click" this button, which is incremented.    Element with "which" values <= the parent (inid) "which" values are displayed
  At is it incremented,   Thus: elements with higher values of  which  are shown LESS frequently

  For example:
       <input type="button"  value="toggle view"  inId="#parentId"  which="2" maxWhich="2" finds=".toggleVarsDo" 
               onClick="ws_toggleElementsToView(this)">';
 ...
  <div id="parentId">
     <span class="toggleVarsDo "   which="0">always show</span> ';
    <span class="toggleVarsDo "    which="1">show less often</span>
    <span class="toggleVarsDo "    which="2">show even less often</span>
  </div>


 Standalone call:  ws_toggleElementsToView(0,inid,finds,which,daButton)
   Similar to above, with
     daButton: if specified, a "button" whose value of "which" will be set
     which: the value of "which" to compare "finds" elements to. 
         It is NOT incremented
         The daButton which attribute will be set to this value
 
   daButton is dom selector string: for example an id (that starts with a '#').
   If more than one match -- first match is used



 ::::::  wsToggleVal              ::  create a button that can be toggled between multiple values AND change display of an associated input element

       wsToggleVal(athis,addTos)

         athis: event element from .on('click') handler
                Or, the parent element containing the fields to assign wsToggleVal (as a 'click' handler)
         addTos: optional, if specified, athis is ignored.
                 If present, then assign wsToggleVal as an .on('click') event handler to $(addTos) elements
                 If addTos=='', then addTos is set to 'wsToggleVal_selectField'

    This creates a button that, when clicked, will toggle through a list of  "categories".
    Toggle means "cycle through a list of defined categories"... when you get to the end, start at the beginning.
    For example:  a "dollar" and a "pct" category.
    Or: "oranges", "apples", or  "bananas"

    Example: Note the use of wsToggleVal_colorA1 and wsToggleVal_colorA1 as CSS classes. These, along with wsToggleVal_colorB1,wsToggleVal_colorB2,
          and wsToggleVal_buttonFormat are specified in wsurveyUtils.css.

      <span class="wsToggleVal_top">                  <!--  parent of the three elements -->

          <input type="number"  name="myVar_value" class="wsToggleVal_valueField wsToggleVal_colorA1"
                 _title0= "Optional title (for input element) for category 0"
                 _title1=" Optional title (for input element) for category 1"
                 title="Costs (such as fees) in Start year: as a dollar amount  " >                  <!-- since _class_list is not specified, the wsToggleVal_selectField classList is used)

          <span  name="myVar_button"  class="wsToggleVal_selectField wsToggleVal_buttonFormat wsToggleVal_colorA1 "
                 _disable="0"
                 _buttonName="myVar"
                 _current="0"
                 _callback="myCallBackFunction"
                 _nvalues="2"
                 _valueList="Dollars,Percent"
                 _classList="wsToggleVal_colorA1,wsToggleVal_colorA2"
                 _title0= "Optional title (for button element) for category 0 "
                 _title1=" Optional title (for button element) for category 0 "
                 title="The original title (before button is toggled) ">
           $</span>                                                     <!-- the initial content of this span SHOULD be the first value in the _valueList! -->

           <input type="hidden"  name="myVar_type"  class="wsToggleVal_typeField " value="0"   >   <!-- the initial value of this span should be the save as _current in wsToggleVal_selectList -->

      </span>


    For a detailed description, see wsToggleVal.txt
